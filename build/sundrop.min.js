/**
 * @license
 * Copyright 2023 GappleCider
 * MIT
 */
function t(t=0,s=1,o=.5){return t+(s-t)*o}function s(t,s){return Math.floor(Math.random()*(s-t))+t}function o(t,s){return Math.random()*(s-t)+t}class i{constructor(t,s){this.x=t,this.y=s}get xPos(){return this.x}get yPos(){return this.y}set xPos(t){this.x=t}set yPos(t){this.y=t}set(t,s){this.x=t,this.y=s}setPostion(t){return this.x=t,this.y=t,[this.x,this.y]}clone(){return this.constructor(this.x,this.y)}scale(t){return this.x*=t,this.y*=t,[this.x,this.y]}getPosition(){return[this.x,this.y]}divide(t){return this.x=this.x/t,this.y=this.y/t,[this.x,this.y]}add(t){this.x=this.x+t,this.y=this.y+t}random(t,s){return this.x=o(t,s),this.y=o(t,s),[this.x,this.y]}}class e{constructor(){this.objs=[],this.domElement=document.createElement("canvas"),this.ctx=this.domElement.getContext("2d"),this.canvasWidth=this.domElement.width=window.innerWidth,this.canvasHeight=this.domElement.height=window.innerHeight}render(t){this.ctx.clearRect(0,0,this.canvasWidth,this.canvasHeight),t&&(this.ctx.save(),this.ctx.translate(t.pos.x,t.pos.y));for(let t=0;t<this.objs.length;t++){if("map"!=this.objs[t].type&&(null!=this.objs[t].props.color?this.ctx.fillStyle=this.objs[t].props.color:this.ctx.fillStyle="black"),"polygon"===this.objs[t].class){if("texturedbox"===this.objs[t].type&&this.objs[t].texture.load){const s=this.ctx.createPattern(this.objs[t].texture.texture,"repeat");this.ctx.fillStyle=s}if(this.objs[t].props.visible){this.ctx.beginPath(),this.ctx.moveTo(this.objs[t].polygon[0].x,this.objs[t].polygon[0].y);for(let s=0;s<this.objs[t].polygon.length-1;s++)this.ctx.lineTo(this.objs[t].polygon[s+1].x,this.objs[t].polygon[s+1].y);this.ctx.lineTo(this.objs[t].polygon[0].x,this.objs[t].polygon[0].y),this.ctx.closePath(),"fill"===this.objs[t].props.drawStyle?this.ctx.fill():"stroke"===this.objs[t].props.drawStyle&&(null!=this.props.stroke.color?this.ctx.strokeStyle=this.props.stroke.color:this.ctx.strokeStyle="black",null!=this.props.stroke.width?this.ctx.lineWidth=this.props.stroke.width:this.ctx.lineWidth=1,this.ctx.stroke())}}if("line"===this.objs[t].type&&this.objs[t].props.visible&&(null!=this.objs[t].props.stroke.color?this.ctx.strokeStyle=this.objs[t].props.stroke.color:this.ctx.strokeStyle="black",null!=this.objs[t].props.stroke.width?this.ctx.lineWidth=this.objs[t].props.stroke.width:this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.moveTo(this.objs[t].startPoint.x,this.objs[t].startPoint.y),this.ctx.lineTo(this.objs[t].endPoint.x,this.objs[t].endPoint.y),this.ctx.closePath(),this.ctx.stroke()),"circle"===this.objs[t].type||"texturedcircle"===this.objs[t].type){if("texturedcircle"===this.objs[t].type&&this.objs[t].texture.load){const s=this.ctx.createPattern(this.objs[t].texture.texture,"repeat");this.ctx.fillStyle=s}this.objs[t].props.visible&&(this.ctx.beginPath(),this.ctx.arc(this.objs[t].pos.x,this.objs[t].pos.y,this.objs[t].radius,0,2*Math.PI),this.ctx.closePath(),"fill"===this.objs[t].props.drawStyle&&this.ctx.fill(),"stroke"===this.objs[t].props.drawStyle&&(null!=this.objs[t].props.stroke.color?this.ctx.strokeStyle=this.objs[t].props.stroke.color:this.ctx.strokeStyle="black",null!=this.objs[t].props.stroke.width?this.ctx.lineWidth=this.objs[t].props.stroke.width:this.ctx.lineWidth=1,this.ctx.stroke()))}if("map"===this.objs[t].type)for(let s=0;s<this.objs[t].map.length;s++){const o=this.objs[t].map[s];if(o.props.visible){if(null!=o.props.color?this.ctx.fillStyle=o.props.color:this.ctx.fillStyle="black","box"==o.props.type){this.ctx.beginPath(),this.ctx.moveTo(o.polygon[0].x,o.polygon[0].y);for(let t=0;t<o.polygon.length-1;t++)this.ctx.lineTo(o.polygon[t+1].x,o.polygon[t+1].y);this.ctx.lineTo(o.polygon[0].x,o.polygon[0].y),this.ctx.closePath(),"fill"===o.props.drawStyle&&this.ctx.fill(),"stroke"===o.props.drawStyle&&(null!=o.props.stroke.color?this.ctx.strokeStyle=o.props.stroke.color:this.ctx.strokeStyle="black",null!=o.props.stroke.width?this.ctx.lineWidth=o.props.stroke.width:this.ctx.lineWidth=1,this.ctx.stroke())}"circle"==o.props.type&&(this.ctx.beginPath(),this.ctx.arc(o.pos.x,o.pos.y,o.props.radius,0,2*Math.PI),this.ctx.closePath(),"fill"===o.props.drawStyle&&this.ctx.fill(),"stroke"===o.props.drawStyle&&(null!=o.props.stroke.color?this.ctx.strokeStyle=o.props.stroke.color:this.ctx.strokeStyle="black",null!=o.props.stroke.width?this.ctx.lineWidth=o.props.stroke.width:this.ctx.lineWidth=1,this.ctx.stroke())),"line"===o.props.type&&(null!=o.props.stroke.color?this.ctx.strokeStyle=o.props.stroke.color:this.ctx.strokeStyle="black",null!=o.props.stroke.width?this.ctx.lineWidth=o.props.stroke.width:this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.moveTo(o.props.startPoint.x,o.props.startPoint.y),this.ctx.lineTo(o.props.endPoint.x,o.props.endPoint.y),this.ctx.closePath(),this.ctx.stroke()),"text"===o.props.type&&(null!=o.props.color?this.ctx.fillStyle=o.props.color:this.ctx.fillStyle="black",null!=o.props.font?this.ctx.font=o.props.font.size+"px"+o.props.font.fontFamily:this.ctx.font="48px Arial",this.ctx.fillText(o.props.text.toString(),o.pos.x,o.pos.y))}}"text"===this.objs[t].type&&(null!=this.objs[t].props.font?this.ctx.font=this.objs[t].props.font.size+"px"+this.objs[t].props.font.fontFamily:this.ctx.font="48px Arial",this.ctx.fillText(this.objs[t].text.toString(),this.objs[t].pos.x,this.objs[t].pos.y))}t&&this.ctx.restore()}saveImage(t,s,o=0,i=0){const e=new Image;e.src=t,e.onload=()=>{const t=this.ctx.getImageData(o,i,e.width,e.height);localStorage.setItem(s,t)}}loadImage(t){const s=localStorage.getItem(t);return s||console.error("Image not found: "+t)}add(t){this.objs.push(t)}remove(t){this.objs.splice(this.objs.indexOf(t),1)}clear(){this.objs=[],this.ctx.clearRect(0,0,this.canvasWidth,this.canvasHeight)}get(t){return this.objs.indexOf(t)}update(){for(let t=0;t<this.objs.length;t++)if("box"!==this.objs[t].type&&"texturedbox"!==this.objs[t].type||this.objs[t].update(),"map"==this.objs[t].type)for(let s=0;s<this.objs[t].map.length;s++){const o=this.objs[t].map[s];for(let s=0;s<Object.keys(o.props).length;s++)"function"==typeof o.props[Object.keys(o.props)[s]]&&("collision"==o.props[Object.keys(o.props)[s]].name?o.props[Object.keys(o.props)[s]](o,this.objs[t].map):o.props[Object.keys(o.props)[s]](o))}}createGradient(t,s=new i(0,0),o=new i(1,1)){const e=this.ctx.createLinearGradient(s.x,s.y,o.x,o.y);for(let s=0;s<t.length;s++){const o=t[s];e.addColorStop(s/t.length,o)}return e}createRGBAColor(t,s,o,i=1){return"rgba("+t+","+s+","+o+","+i+")"}convertHexToRGBA(t){let s;if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))return s=t.substring(1).split(""),3==s.length&&(s=[s[0],s[0],s[1],s[1],s[2],s[2]]),s="0x"+s.join(""),"rgba("+[s>>16&255,s>>8&255,255&s].join(",")+",1)"}setSize(t,s){this.canvasWidth=this.domElement.width=t,this.canvasHeight=this.domElement.height=s}setColor(t){this.domElement.style.backgroundColor=t}setAlpha(t){this.domElement.style.opacity=t}}class h{constructor(t,s){const o=s.arguments;this.url=t,this.texture=new Image,this.texture.src=t,this.onload=s,this.load=!1,this.texture.onload=()=>{this.load=!0,this.onload(o)}}}class r{constructor(t,s){this.pos={x:t,y:s}}setPos(t,s){this.pos={x:t,y:s}}scale(t){this.pos.x*=t,this.pos.y*=t}}class l{constructor(t="",s=0,o=0){this.text=t,this.pos={x:s,y:o},this.props={},this.type="text"}}class p{constructor(t=0,s=0,o=0,i=0){this.pos={x:t,y:s},this.width=o,this.height=i,this.props={visible:!0},this.tags={},this.class="polygon",this.type="box",this.polygon=this.createPolygon()}createPolygon(){let t=[];return t.push({x:this.pos.x-this.width/2,y:this.pos.y-this.height/2}),t.push({x:this.pos.x+this.width/2,y:this.pos.y-this.height/2}),t.push({x:this.pos.x+this.width/2,y:this.pos.y+this.height/2}),t.push({x:this.pos.x-this.width/2,y:this.pos.y+this.height/2}),t}update(){this.polygon=this.createPolygon()}}class n{constructor(t=0,s=0,o=0){this.pos={x:t,y:s},this.radius=o,this.type="circle",this.props={visible:!0},this.tags={}}}class c{constructor(t=[]){this.props={visible:!0},this.polygon=t,this.tags={},this.class="polygon",this.points.forEach((t=>{t.push(new i(t[0],t[1])),t.splice(0,2)}))}}var x=Object.freeze({__proto__:null,Box2D:p,Circle2D:n,Line:class{constructor(t=0,s=0,o=0,e=0){this.startPoint=new i(t,s),this.endPoint=new i(o,e),this.props={visible:!0},this.tags={},this.type="line"}},Polygon:c});var y=Object.freeze({__proto__:null,TexturedBox2D:class extends p{constructor(t=0,s=0,o=0,i=0,e=new h){super(t,s,o,i),this.texture=e,this.type="texturedbox"}},TexturedCircle2D:class extends n{constructor(t=0,s=0,o=0,i=new h){super(t,s,o),this.texture=i,this.type="texturedcircle"}},TexturedPolygon:class extends c{constructor(t=[],s=new h){super(t),this.texture=s,this.class="texturedpoly"}}});var a=Object.freeze({__proto__:null,Hexagon2D:class extends p{constructor(t,s,o,i){super(t,s,o,i)}createPolygon(){const t=[],s=this.width-this.width/4,o=this.height-this.height/8;return t.push({x:this.pos.x-s,y:this.pos.y-this.height/2}),t.push({x:this.pos.x,y:this.pos.y-o}),t.push({x:this.pos.x+s,y:this.pos.y-this.height/2}),t.push({x:this.pos.x+s,y:this.pos.y+this.height/2}),t.push({x:this.pos.x,y:this.pos.y+o}),t.push({x:this.pos.x-s,y:this.pos.y+this.height/2}),t}},Pentagon2D:class extends p{constructor(t=0,s=0,o=0,i=0){super(t,s,o,i)}createPolygon(){const t=[],s=this.width-this.width/4;return t.push({x:this.pos.x-s,y:this.pos.y-this.height/2}),t.push({x:this.pos.x,y:this.pos.y-this.height}),t.push({x:this.pos.x+s,y:this.pos.y-this.height/2}),t.push({x:this.pos.x+this.width/2,y:this.pos.y+this.height/2}),t.push({x:this.pos.x-this.width/2,y:this.pos.y+this.height/2}),t}}});function u(t){document.addEventListener("keydown",(s=>{if(s.key==t)return!0}))}class d{constructor(t){this.sound=document.createElement("audio"),this.sound.src=t,this.sound.setAttribute("preload","auto"),this.sound.setAttribute("controls","none"),this.sound.style.display="none",document.body.appendChild(this.sound)}play(){this.sound.play()}stop(){this.sound.pause()}}function b(s,o){if("circle"===s.type&&"circle"===o.type){const e=s.radius+o.radius,h=s.pos.x-o.pos.x,r=s.pos.y-o.pos.y;return e>Math.sqrt(h*h+r*r)}if("polygon"===s.class&&"polygon"===o.class){function i(s,o,i,e){const h=(e.x-i.x)*(s.y-i.y)-(e.y-i.y)*(s.x-i.x),r=(i.y-s.y)*(s.x-o.x)-(i.x-s.x)*(s.y-o.y),l=(e.y-i.y)*(o.x-s.x)-(e.x-i.x)*(o.y-s.y);if(0!=l){const i=h/l,e=r/l;if(i>=0&&i<=1&&e>=0&&e<=1)return{x:t(s.x,o.x,i),y:t(s.y,o.y,i),offset:i}}return null}for(let l=0;l<s.polyon;l++)for(let p=0;p<o.polyon;p++){if(i(s.points[l],o.points[p],s.points[(l+1)%s.polyon],o.points[(p+1)%o.polyon]))return!0}return!1}if("polygon"===s.class&&"circle"===o.type){const n=Math.abs(o.pos.x-s.pos.x),c=Math.abs(o.pos.y-s.pos.y);if(n>s.width/2+o.radius||c>s.height/2+o.radius)return!1;if(n<=s.width/2||c<=s.height/2)return!0;return(n-s.width/2^c-s.height+2^2)<=(2^o.radius)}if("circle"===s.type&&"polygon"===o.class){const x=Math.abs(s.pos.x-o.pos.x),y=Math.abs(s.pos.y-o.pos.y);if(x>o.width/2+s.radius||y>o.height/2+s.radius)return!1;if(x<=o.width/2||y<=o.height/2)return!0;return(x-o.width^y-o.height+2^2)<=(2^s.radius)}return console.error("shapes do not have a proper type or class")}class g{constructor(t,s,o){this.map=t,this.key=s,this.value=o,this.type="map";const i=[];for(let t=0;t<this.map.length;t++){const s=this.map[t];for(let o=0;o<s.length;o++){const e=s[o];for(let s=0;s<e.length;s++){let o=e[s],h=o;if(" "!=o){const e=this.value.split("x"),r=s*Number(e[0]),l=t*Number(e[1]),p=Number(e[0]),n=Number(e[1]),c=()=>{for(let t=0;t<=Object.keys(this.key).length;t++){if(this.key[o]){return this.key[o]}t==Object.keys(this.key).length&&console.error("No key found")}},x=c(),y=this.generatePolygon(r,l,x.width?x.width:p,x.height?x.height:n);o=class{constructor(t,s,o,i,e,h){this.x=t,this.y=s,this.width=o,this.height=i,this.polygon=e,this.props=h}},i.push({pos:{x:r,y:l},type:x.type,class:"box"==x.type?"polygon":null,width:"box"==x.type?x.width?null:Number(e[0]):null,height:"box"==x.type?x.width?null:Number(e[1]):null,radius:"circle"==x.type?x.radius:null,charName:h,width:p,height:n,polygon:y,props:x})}}}}this.map=i}generatePolygon(t,s,o,i){const e=[];return e.push({x:t-o/2,y:s-i/2}),e.push({x:t+o/2,y:s-i/2}),e.push({x:t+o/2,y:s+i/2}),e.push({x:t-o/2,y:s+i/2}),e}}export{a as AdvancedGeometry,x as BasicGeometry,g as BasicMap,e as BasicRenderer2D,r as PerspectiveCamera2D,d as Sound,l as TextObject,h as Texture2D,y as TexturedGeometry,i as Vec2,u as addKeyListeners,b as checkCollision,t as lerp,o as randomFloat,s as randomInt};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VuZHJvcC5taW4uanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OzsifQ==
